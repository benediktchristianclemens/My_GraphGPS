# cluster_embeddings.py
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from matplotlib.colors import ListedColormap
import numpy as np
import torch
import os  # Added to handle directory operations

def visualize_cluster_embeddings(best_model, curr_data, n_clusters=12, data_name=""):
    """
    Perform clustering on the embeddings generated by the model and visualize the results.

    Parameters
    ----------
    best_model : torch.nn.Module
        The trained model with a method `get_embeddings` to generate embeddings.
    curr_data : torch_geometric.data.Data
        The PyG Data object containing node features and edge indices.
    n_clusters : int, optional (default=12)
        The number of clusters to form using KMeans.
    data_name : str, optional
        Name of the dataset variant for plot naming.

    Returns
    -------
    None
        Displays and saves a 2D scatter plot of the clustered embeddings.
    """
    # Ensure the model is in evaluation mode
    best_model.eval()
    with torch.no_grad():
        # Generate embeddings using the model
        embeddings = best_model.get_embeddings(curr_data.x, curr_data.edge_index)

    # Perform KMeans clustering on the embeddings
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    labels = kmeans.fit_predict(embeddings.cpu().numpy())

    # Reduce dimensions to 2D using PCA for visualization
    pca = PCA(n_components=2)
    reduced_embeddings = pca.fit_transform(embeddings.cpu().numpy())

    # Define distinct colors for clusters
    colors = [
        "red", "blue", "green", "orange", "purple", "brown",
        "pink", "gray", "olive", "cyan", "gold", "lime"
    ]
    # Ensure we have enough colors for the clusters
    if len(colors) < n_clusters:
        raise ValueError(f"Not enough predefined colors for {n_clusters} clusters.")

    cmap = ListedColormap(colors[:n_clusters])

    # Create the scatter plot
    plt.figure(figsize=(10, 8))
    for cluster_id in np.unique(labels):
        cluster_points = reduced_embeddings[labels == cluster_id]
        plt.scatter(
            cluster_points[:, 0],
            cluster_points[:, 1],
            label=f"Cluster {cluster_id}",
            color=cmap(cluster_id),
            alpha=0.6,
            edgecolors='w',
            s=100
        )

    # Add legend and labels
    plt.legend(title="Clusters", bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.title(f"Clustered Embeddings Visualization for {data_name} ({n_clusters} Clusters)")
    plt.xlabel("PCA Component 1")
    plt.ylabel("PCA Component 2")
    plt.grid(True)
    plt.tight_layout()

    # Ensure the 'results' directory exists
    results_dir = 'results'
    if not os.path.exists(results_dir):
        os.makedirs(results_dir)

    # Save the plot to the 'results' folder
    plot_path = os.path.join(results_dir, f"clustered_embeddings_{data_name}.png")
    plt.savefig(plot_path)
    plt.show()